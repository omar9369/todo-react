{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","a","newTodos","set","i","fetch","response","json","data","joke","jokeID","push","test","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce2e7318.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n/*\r\nThis class will called when a the user submits an input or updates an input. It will give them an ID and text. This also has the user input bar and a button to input the text\r\n*/\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  //This will instantly focus the input field \r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  //Once the user submits it will calculate a random ID and have the text as the value the user input\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 1000),\r\n      text: input,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Update your Item\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input edit\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n\r\n          <button className=\"todo-button edit\">Update</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add a todo\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n\r\n          <button className=\"todo-button\">Add todo</button>\r\n          \r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport {RiCloseCircleLine} from \"react-icons/ri\";\r\nimport {TiEdit} from \"react-icons/ti\";\r\nimport TodoForm from \"./TodoForm\"\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo}) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  //This will update of the todo. Once it does that it will reset the id and value back to null\r\n  const submitUpdate = value => {\r\n\r\n      updateTodo(edit.id, value)\r\n      setEdit({\r\n          id:null,\r\n          value: ''\r\n      })\r\n  };\r\n \r\n  //When the user clickes edit it will get update the todo with the id and the new value.\r\n  if(edit.id){\r\n      return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  //todo is the array from TodoList and index is just how many there are\r\n  return todos.map((todo, index) => (\r\n      \r\n    <div\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine \r\n        onClick={() => removeTodo(todo.id)}\r\n        className='delete-icon'\r\n        />\r\n        <TiEdit \r\n        onClick ={() => setEdit ({id: todo.id, value:todo.text})}\r\n        className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction TodoList() {\r\n  //todos is an array of all the values and ID's\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  //This will add the todo which consists of ID and the value into the aray todos\r\n  const addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    const newTodos = [todo, ...todos];\r\n    console.log(newTodos);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  //This will filter out a specific index in the array by checking if the ID's are the same\r\n  const removeTodo = (id) => {\r\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removeArr);\r\n  };\r\n\r\n  //By taking the ID and the new value that the user input. It will map through the array, once it finds the ID, it will change the new value\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    setTodos((prev) =>\r\n      prev.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n\r\n  //Once the todo is clicked to be completed it will get the ID and complete the certain todo\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      \r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    console.log(\"hi\");\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  //This will fetch the api and get the jokes. Once it does it will push them into the array todos and display it.\r\n  useEffect(async () => {\r\n    let newTodos = [];\r\n    let set = [];\r\n    let test = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const response = await fetch(\r\n        \"https://api.chucknorris.io/jokes/random?category=dev\"\r\n      );\r\n      const data = await response.json();\r\n      const joke = data.value;\r\n      const jokeID = data.id;\r\n\r\n      set = {\r\n        id: jokeID,\r\n        text: joke,\r\n      };\r\n      newTodos.push(set);\r\n    }\r\n\r\n    test = set;\r\n    setTodos(newTodos);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Todo List</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\nimport TodoList from \"./components/TodoList\";\nimport React from 'react';\n\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}